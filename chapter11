

# EXERCISE 11.1.
'''
Write a function that reads the words in words.txt and stores them as keys in a
dictionary. It doesnâ€™t matter what the values are. Then you can use the in operator as a fast way to
check whether a string is in the dictionary.
If you did Exercise 10.10, you can compare the speed of this implementation with the list in operator
and the bisection search.
'''

# Use dictionary: 0.058892011642456055 seconds

import time
def word_dict():
    d = dict()
    fin = open('words.txt')
    for line in fin:
        word = line.strip()
        d[word] = 1
    return d


def check_word(d, word):
    return word in d


start_time = time.time()
word_dict = word_dict()
elapsed_time = time.time() - start_time

print(check_word(word_dict, 'swear'))
print(elapsed_time, 'seconds')


# Use in operator: 0.04341888427734375 seconds

import time

def word_list():
    fin = open('words.txt')
    t = []
    for line in fin:
        word = line.strip()
        t.append(word)
    return t

def check_word(word_list, word):
    for w in word_list:
        if word == w:
            return True
    return False

start_time = time.time()
word_list = word_list()

# check the list using our function in_bisect():
print(check_word(word_list, 'swear'))
elapsed_time = time.time() - start_time

print(elapsed_time, 'seconds')


# Use bi_insect() function: 0.05539584159851074 seconds
